/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/java_library_plugin.html
 */
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.gradle.build-scan' version '2.3'
    id 'com.github.hierynomus.license-base' version '0.15.0'
}

group = 'com.lingocoder'
version = '0.4.7'
description = "A command line application that scans a Java library and detects whether the library exposes types from its dependencies to the library's consumers."

repositories{
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.7'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.8'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    testImplementation 'org.apache.commons:commons-lang3:3.5'

    implementation 'com.lingocoder:lingocoder.core:0.4.7'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    implementation gradleApi()

    // https://mvnrepository.com/artifact/org.bitcoinj/bitcoinj-core
    testImplementation group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.15-SNAPSHOT'

    testImplementation 'org.apache.commons:commons-math:2.2'

    // https://mvnrepository.com/artifact/jp.dodododo.janerics/janerics
    testImplementation group: 'jp.dodododo.janerics', name: 'janerics', version: '1.0.1'

    // https://mvnrepository.com/artifact/de.huxhorn.sulky/de.huxhorn.sulky.generics
    testImplementation group: 'de.huxhorn.sulky', name: 'de.huxhorn.sulky.generics', version: '8.2.0'

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'

    testImplementation group: 'org.apache.commons', name: 'commons-csv', version: '1.6'

    testImplementation group: 'commons-codec', name: 'commons-codec', version: '1.5'
}

license { header = file('src/main/resources/META-INF/LICENSE-HEADER.txt') }

license {
    excludes(["**/*.txt", "**/*keep*.*", "**/*.gradle*", "**/*.*ignore", "**/*.properties"])

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'lingocoder'
    ext.email = 'plugins@lingocoder.com'

    skipExistingHeaders = true
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
        options.addStringOption('--no-module-directories')
    }
}
